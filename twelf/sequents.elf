% interpret judgement codes in the empty context to their primitive meanings.
□ : judgement · -> type. %prefix 8 □.
%mode □ +J.

□/type : □ ! A `type
          <- A is-type.
□/eq-type : □ `eq-type (! A) (! B)
             <- eq-type A B.
□/mem : □ ! M `∈ ! A
         <- mem M A.
□/eq-mem : □ `eq-mem (! M) (! N) (! A)
         <- eq-mem M N A.

% interpret judgement codes in an open context functionally.
>> : {G:ctx} judgement G -> type. %infix left 7 >>.
%mode >> +G +J.

>>/· : · >> J
        <- □ J.
>>/, : G , A >> J
        <- stretch J J=
        <- apply J J'
        <- ({x} {x'} wk x x'
              -> G >> x' `∈ A
              -> G >> J' x)
        <- ({x} {x'} wk x x'
              -> {y} {y'} wk y y'
              -> G >> `eq-mem x' y' A
              -> G >> J= x y).
                               
%solve - : · , ! ↑ unit >> (@' ! ↑ unit) `type.
%solve - : (· , ! ↑ unit , @' ! ↑ unit) >> @' (@' ! ↑ unit) `type.
