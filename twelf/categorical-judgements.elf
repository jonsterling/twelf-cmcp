=> : tm -> val -> type. %infix right 9 =>. %mode => +E -M.

=>/↑ : ↑ M => M.
=>/ap : ap (↑ lam E) N => E·N
         <- E N => E·N.
=>/fst : fst ↑ pair E1 E2 => M
          <- E1 => M.
=>/snd : snd ↑ pair E1 E2 => N
          <- E2 => N.

%block tm-b : block {x:tm}.

can-type : val -> type. %postfix 10 can-type.
%mode can-type +A.

is-type : tm -> type. %postfix 10 is-type.
%mode is-type +A.

can-eq-type : val -> val -> type.
%mode can-eq-type +A +B.

eq-type : tm -> tm -> type.
%mode eq-type +A +B.

can-mem : val -> val -> type.
%mode can-mem +M +A.

mem : tm -> tm -> type.
%mode mem +M +A.

can-eq-mem : val -> val -> val -> type.
%mode can-eq-mem +M +N +A.

eq-mem : tm -> tm -> tm -> type.
%mode eq-mem +M +N +A.

%block can-mem-b : some {A} block {x} {_ : can-mem x A}.
%block can-eq-mem-b : some {A} block {x} {y} {_ : can-eq-mem x y A}.
%block mem-b : some {A} block {x} {_ : mem x A}.
%block eq-mem-b : some {A} block {x} {y} {_ : eq-mem x y A}.

is-type/def : A is-type
               <- A => A'
               <- A' can-type.

eq-type/def : eq-type A B
               <- B => B'
               <- A => A'
               <- can-eq-type A' B'.

mem/def : mem M A
           <- M => M'
           <- A => A'
           <- can-mem M' A'.

can-eq-type/def : can-eq-type A B
                   <- ({x} {y} can-eq-mem x y B -> can-eq-mem x y A)
                   <- ({x} {y} can-eq-mem x y A -> can-eq-mem x y B)
                   <- ({x} can-mem x B -> can-mem x A)
                   <- ({x} can-mem x A -> can-mem x B).

can-type/void : void can-type.
can-type/unit : unit can-type.
can-type/pi : pi A B can-type
               <- A is-type
               <- ({x} {y} eq-mem x y A -> eq-type (B x) (B y))
               <- ({x} mem x A -> B x is-type).
can-type/sg : sg A B can-type
               <- A is-type
               <- ({x} {y} eq-mem x y A -> eq-type (B x) (B y))
               <- ({x} mem x A -> B x is-type).

can-mem/ax : can-mem ax unit.
can-eq-mem/ax : can-eq-mem ax ax unit.

can-mem/lam : can-mem (lam E) (pi A B)
               <- ({x} {y} eq-mem x y A -> eq-mem (E x) (E y) (B x))
               <- ({x} mem x A -> mem (E x) (B x)).
can-eq-mem/lam : can-eq-mem (lam E) (lam E') (pi A B)
                  <- ({x} {y} eq-mem x y A -> eq-mem (E x) (E' y) (B x))
                  <- ({x} mem x A -> eq-mem (E x) (E' x) (B x)).

can-mem/pair : can-mem (pair M N) (sg A B)
                <- mem N (B M)
                <- mem M A.
can-eq-mem/pair : can-eq-mem (pair M N) (pair M' N') (sg A B)
                   <- eq-mem N N' (B M)
                   <- eq-mem M M' A.

%worlds (mem-b | eq-mem-b | can-mem-b | can-eq-mem-b) (is-type _) (can-type _) (eq-type _ _) (can-eq-type _ _) (mem _ _) (can-mem _ _) (eq-mem _ _ _) (can-eq-mem _ _ _) (=> _ _).