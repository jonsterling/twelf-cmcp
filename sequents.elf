% codes for judgements in a sequent
judgement : ctx -> type.

judgement/type : otm G -> judgement G.
%abbrev `type = judgement/type. %postfix 9 `type.

judgement/eq-type : otm G -> otm G -> judgement G.
%abbrev `eq-type = judgement/eq-type.

judgement/mem : otm G -> otm G -> judgement G.
%abbrev `∈ = judgement/mem. %infix right 9 `∈.

judgement/eq-mem : otm G -> otm G -> otm G -> judgement G.
%abbrev `eq-mem = judgement/eq-mem.


% applies an open judgement to a term
apply : judgement (G , C) -> (tm -> judgement G) -> type.
%mode apply +J -J'.

apply/type : apply (@ A `type) ([x] A x `type).
apply/eq-type : apply (`eq-type (@ A) (@ B)) ([x] `eq-type (A x) (A x)).
apply/mem : apply (@ M `∈ @ A) ([x] (M x) `∈ (A x)).
apply/eq-mem : apply (`eq-mem (@ M) (@ N) (@ A)) ([x] `eq-mem (M x) (N x) (A x)).

%worlds () (apply _ _).
%total J (apply J _).

% "stretches" an open judgement functionally across an interval
stretch : judgement (G , C) -> (tm -> tm -> judgement G) -> type.
%mode stretch +J -J=.

stretch/type : stretch (@ A `type) ([x] [y] `eq-type (A x) (A y)).
stretch/eq-type : stretch (`eq-type (@ A) (@ B)) ([x] [y] `eq-type (A x) (B y)).
stretch/mem : stretch (@ M `∈ @ A) ([x] [y] `eq-mem (M x) (M y) (A x)).
stretch/eq-mem : stretch (`eq-mem (@ M) (@ N) (@ A)) ([x] [y] `eq-mem (M x) (N y) (A x)).

%worlds () (stretch _ _).
%total J (stretch J _).

% closed terms may be weakened
weaken : {G:ctx} tm -> otm G -> type.
%abbrev wk = weaken G.
%mode weaken +G +M -O.
weaken/· : weaken · M (! M).
weaken/, : weaken (G , A) M (@ [x] M')
            <- weaken G M M'.
%worlds () (weaken _ _ _).
%total G (weaken G _ _).

% interpret judgement codes in the empty context to their primitive meanings.
□ : judgement · -> type. %prefix 8 □.
%mode □ +J.

□/type : □ ! A `type
          <- A is-type.
□/eq-type : □ `eq-type (! A) (! B)
             <- eq-type A B.
□/mem : □ ! M `∈ ! A
         <- mem M A.
□/eq-mem : □ `eq-mem (! M) (! N) (! A)
         <- eq-mem M N A.

% interpret judgement codes in an open context functionally.
>> : {G:ctx} judgement G -> type. %infix left 7 >>.
%mode >> +G +J.

>>/· : · >> J
        <- □ J.
>>/, : G , A >> J
        <- stretch J J=
        <- apply J J'
        <- ({x} {x'} wk x x'
              -> G >> x' `∈ A
              -> G >> J' x)
        <- ({x} {x'} wk x x'
              -> {y} {y'} wk y y'
              -> G >> `eq-mem x' y' A
              -> G >> J= x y).
                               
%solve - : · , ! ↑ unit >> (@ [_] ! ↑ unit) `type.
%solve - : (· , ! ↑ unit , @ [x] ! ↑ unit) >> (@ [x] @ [y] ! ↑ unit) `type.
